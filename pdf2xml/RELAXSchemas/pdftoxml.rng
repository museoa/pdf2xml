<?xml version="1.0" encoding="UTF-8"?>
<!--
  ======================
  Xerox Research Centre Europe
  ======================
  
  
  Originally created by Sophie Andrieu
  translation into RelaxNG by Jean-Yves Vion-Dury 
  
  04/2006
-->
<!-- default namespace DS = "http://www.xrce.xerox.com/DS" -->
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <a:cvs-header>
   $Header$
   </a:cvs-header>
  <a:cvs-log>
    $Log$
    Revision 1.2  2008/02/06 10:48:28  dejean
    TOKEN/@type added (LR direction)
    some modif about yes, no , true, false attribute values.

    Revision 1.1  2008/01/29 08:53:24  dejean
    v 1.2

    Revision 1.17  2007/12/14 10:48:41  hdejean
    new attributes: TOKEN/@sid, GROUP/@sid, IMAGE/@sid
    GROUP/@style optional

    Revision 1.16  2007/11/30 16:39:36  hdejean
    commented the default nsamespace: DS

    Revision 1.15  2007/11/30 16:38:46  hdejean
    add baseline to TOKEN

    Revision 1.14  2006/11/08 09:14:41  sandrieu
    Update METADATA tags schemas : add a PROCESS tag which will store informations for all component execution.

    Revision 1.13  2006/08/18 08:47:18  sandrieu
    Change id value of IMAGE tag (pNum_iNum).
    TOKEN tag always contain an id attribute (TOKEN as word or TOKEN as image inline).

    Revision 1.12  2006/08/16 13:41:27  sandrieu
    Add id attribute to IMAGE tag.
    Add id and format attribute to PAGE tag.

    Revision 1.11  2006/08/11 09:19:30  sandrieu
    Add comments.
    Change the TOKEN tag definition :
     - it can be a characters sequence
     - it can be an image which is inline in the stream
    In these two cases, attributes are differents.

    Revision 1.10  2006/06/20 14:56:29  sandrieu
    Change the CLIP tag : now, a CLIP tag contains a GROUP tag.
    Add "idClipZone" and "clipZone" attributes to CLIP tag and GROUP tag : it's necessary for matching GROUP instructions with CLIP area.

    Revision 1.9  2006/06/13 14:27:15  sandrieu
    Add the METADATA tag which is a child of DOCUMENT tag. The METADATA tag contains PDFFILENAME tag and VERSION tag.

    Revision 1.8  2006/05/19 14:24:48  sandrieu
    Add the BLOCK tag which contain a sequence of TEXT tag. A PAGE tag can contain a sequence of BLOCK tags or a sequence of TEXT tags.

    Revision 1.7  2006/04/27 12:19:36  sandrieu
    Change the attribut name smallcap to small-cap.

    Revision 1.6  2006/04/27 12:13:29  sandrieu
    Correction about conversion attribut debug to detail.

    Revision 1.5  2006/04/27 09:37:57  viondury
    changed xsd:boolean attributes into "false" | "true"
    fix omitted id attribute for TOKEN with lexical structure "p\d+_w\d+"

    Revision 1.4  2006/04/27 09:10:33  viondury
    normalization of all attribute names and values:

    	- all uppercase attribute names become lowercase
    	- compound names are dash-separated (e.g. charSpace becomes char-space)
    	- IMAGE@inline was "0"/"1" -&gt; becomes "false"/"true"
    	- suppression of default values for optional attributes
    	- suppression of number limits in TEXT@id attribute (was "p\d{3}_t\d{2}", becomes "p\d+_t\d+")

    changed structure of ids for FRAME from "table-XX-YY" into "frame-XX-YY" and TEXT@imbedded-in accordingly.

    Revision 1.3  2006/04/26 09:40:25  viondury
    minor: fixed cvs-log problem

    </a:cvs-log>
  <start>
    <a:documentation>Schema for capturing the structure of xml output from the pdftoxml tool
do not change the policy which consists in having a "a-XXX" and "c-XXX" 
definition for each "XXX" tag definition, as it furthers the modular use of
this schema by other component-related schemas</a:documentation>
    <a:documentation>Example of XML document :  attributes are not consistant

&lt;DOCUMENT&gt;
   &lt;METADATA&gt;
       &lt;PDFFILENAME&gt;file.pdf&lt;/PDFFILENAME&gt;
       &lt;PROCESS name="pdftoxml" cmd=""&gt;
           &lt;VERSION value="1.0"&gt;
               &lt;COMMENT/&gt;
           &lt;/VERSION&gt;
           &lt;CREATIONDATE&gt;Wed Nov 08 09:32:03 2006&lt;/CREATIONDATE&gt;
       &lt;/PROCESS&gt;
   &lt;/METADATA&gt;
   &lt;PAGE width="419" height="595" number="1"&gt;
       &lt;IMAGE x="25" y="31" width="377" height="534" inline="0" href="file.xml_data/image-1.ppm" /&gt; 
       &lt;TEXT x="44" y="384" width="123" height="15" id="p1_t1"&gt;
           &lt;TOKEN id="p1_w1" rotation="0" angle="0" font-name="Courier" bold="no" italic="no" font-size="15" font-color="#000000" x="44" y="384" width="24" height="14"&gt;This&lt;/TOKEN&gt;
           &lt;TOKEN id="p1_w2" rotation="0" angle="0" font-name="Courier" bold="no" italic="no" font-size="15" font-color="#000000" x="73" y="384" width="12" height="14"&gt;is&lt;/TOKEN&gt;
           &lt;TOKEN id="p1_w3" rotation="0" angle="0" font-name="Courier" bold="no" italic="no" font-size="15" font-color="#000000" x="89" y="384" width="25" height="14"&gt;a&lt;/TOKEN&gt;
           &lt;TOKEN id="p1_w4" rotation="0" angle="0" font-name="Courier" bold="no" italic="no" font-size="15" font-color="#000000" x="118" y="384" width="49" height="14"&gt;line.&lt;/TOKEN&gt;
       &lt;/TEXT&gt;
       &lt;TEXT x="60" y="500" width="33" height="12" id="p1_t2"&gt;
           &lt;TOKEN id="p1_w5" rotation="0" angle="0" font-name="Courier" bold="no" italic="no" font-size="12" font-color="#000000" x="60" y="500" width="13" height="12"&gt;page&lt;/TOKEN&gt;
           &lt;TOKEN id="p1_w6" rotation="0" angle="0" font-name="Courier" bold="no" italic="no" font-size="12" font-color="#000000" x="75" y="500" width="6" height="12"&gt;12&lt;/TOKEN&gt;
       &lt;/TEXT&gt;
   &lt;/PAGE&gt;
   &lt;PAGE&gt;
       ....
   &lt;/PAGE&gt;
   &lt;xi:include xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://www.xrce.xerox.com/DS" href="file.xml_data/image-5.vec"/&gt;
&lt;/DOCUMENT&gt;</a:documentation>
    <choice>
      <ref name="Document"/>
      <ref name="Page"/>
      <ref name="VectorialImages"/>
    </choice>
  </start>
  <!-- attribute groups -->
  <define name="a-Base">
    <attribute name="base">
      <data type="anyURI"/>
    </attribute>
  </define>
  <!-- xml:base {xsd:anyURI}? -->
  <define name="a-Size">
    <attribute name="width">
      <data type="decimal"/>
    </attribute>
    <attribute name="height">
      <data type="decimal"/>
    </attribute>
  </define>
  <define name="a-Position">
    <attribute name="x">
      <data type="decimal"/>
    </attribute>
    <attribute name="y">
      <data type="decimal"/>
    </attribute>
  </define>
  <define name="a-Basic">
    <ref name="a-Size"/>
    <ref name="a-Position"/>
  </define>
  <define name="Document">
    <a:documentation>A document is composed of a Metadata and a sequence of Pages </a:documentation>
    <element name="DOCUMENT">
      <ref name="Metadata"/>
      <oneOrMore>
        <ref name="Page"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Metadata">
    <a:documentation>Document = element DOCUMENT { a-Base, Metadata, Page+ }</a:documentation>
    <a:documentation>A Metadata contains a PdfFileName and a Process</a:documentation>
    <element name="METADATA">
      <ref name="PdfFileName"/>
      <oneOrMore>
        <ref name="Process"/>
      </oneOrMore>
    </element>
  </define>
  <define name="PdfFileName">
    <a:documentation>A PdfFileName contains textual data which is the PDF file name </a:documentation>
    <element name="PDFFILENAME">
      <text/>
    </element>
  </define>
  <define name="Process">
    <a:documentation>A Process contains a Version and a CreationDate </a:documentation>
    <element name="PROCESS">
      <ref name="a-Process"/>
      <ref name="c-Process"/>
    </element>
  </define>
  <define name="a-Process">
    <attribute name="name">
      <data type="string"/>
    </attribute>
    <attribute name="cmd">
      <data type="string"/>
    </attribute>
  </define>
  <define name="c-Process">
    <ref name="Version"/>
    <ref name="CreationDate"/>
  </define>
  <define name="Version">
    <a:documentation>A Version contains a Comment</a:documentation>
    <element name="VERSION">
      <ref name="a-Version"/>
      <ref name="Comment"/>
    </element>
  </define>
  <define name="a-Version">
    <attribute name="value">
      <data type="string"/>
    </attribute>
  </define>
  <define name="Comment">
    <a:documentation>A Comment contains string data</a:documentation>
    <element name="COMMENT">
      <text/>
    </element>
  </define>
  <define name="CreationDate">
    <a:documentation>A CreationDate contains string data which is a complete date</a:documentation>
    <element name="CREATIONDATE">
      <text/>
    </element>
  </define>
  <define name="sid">
    <a:documentation>id correspondinf to the flow in the PDF</a:documentation>
    <attribute name="sid">
      <data type="string">
        <param name="pattern">p\d+_s\d+</param>
      </data>
    </attribute>
  </define>
  <define name="a-Page">
    <a:documentation>A Page contains: images and/or text and/or vectors
as a Page can be xincluded, it must accept the xml:base attribute </a:documentation>
    <!-- a-Base, -->
    <ref name="a-Size"/>
    <attribute name="number">
      <data type="positiveInteger"/>
    </attribute>
    <attribute name="id">
      <data type="string">
        <param name="pattern">p\d+</param>
      </data>
    </attribute>
    <optional>
      <attribute name="format">
        <choice>
          <value>A3</value>
          <value>landscape</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="c-Page">
    <choice>
      <ref name="c-boxes"/>
      <zeroOrMore>
        <ref name="Image"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="VectorialImages"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="Text"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="Block"/>
      </zeroOrMore>
    </choice>
  </define>
  <define name="Page">
    <element name="PAGE">
      <ref name="a-Page"/>
      <zeroOrMore>
        <ref name="c-Page"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="a-box">
    <attribute name="x1">
      <data type="string"/>
    </attribute>
    <attribute name="y1">
      <data type="string"/>
    </attribute>
    <attribute name="x2">
      <data type="string"/>
    </attribute>
    <attribute name="y2">
      <data type="string"/>
    </attribute>
  </define>
  <define name="c-boxes">
    <choice>
      <ref name="c-mediabox"/>
      <ref name="c-trimbox"/>
      <ref name="c-cropbox"/>
      <ref name="c-bleedbox"/>
      <ref name="c-artbox"/>
    </choice>
  </define>
  <define name="c-mediabox">
    <a:documentation>page boxes</a:documentation>
    <element name="MEDIABOX">
      <ref name="a-box"/>
    </element>
  </define>
  <define name="c-trimbox">
    <element name="TRIMBOX">
      <ref name="a-box"/>
    </element>
  </define>
  <define name="c-cropbox">
    <element name="CROPBOX">
      <ref name="a-box"/>
    </element>
  </define>
  <define name="c-bleedbox">
    <element name="BLEEDBOX">
      <ref name="a-box"/>
    </element>
  </define>
  <define name="c-artbox">
    <element name="ARTBOX">
      <ref name="a-box"/>
    </element>
  </define>
  <define name="a-Image">
    <a:documentation>Caracteristics about an image included in a page
I had to a put an optional mask in order to validate an old "out.xml" instance</a:documentation>
    <ref name="a-Basic"/>
    <optional>
      <!-- attribute rotation {"false| true" }?, -->
      <attribute name="inline">
        <choice>
          <value>false</value>
          <value>true</value>
        </choice>
      </attribute>
    </optional>
    <attribute name="href">
      <data type="anyURI"/>
    </attribute>
    <optional>
      <attribute name="mask">
        <value>true</value>
      </attribute>
    </optional>
    <optional>
      <attribute name="id">
        <data type="string">
          <param name="pattern">p\d+_i\d+</param>
        </data>
      </attribute>
    </optional>
    <ref name="sid"/>
  </define>
  <define name="c-Image">
    <empty/>
  </define>
  <define name="Image">
    <element name="IMAGE">
      <ref name="a-Image"/>
      <ref name="c-Image"/>
    </element>
  </define>
  <define name="a-VectorialImages">
    <a:documentation>Added a-base in order xinclude to be ok (it adds a base attribute after inclusion)
as a VectorialImage can be xincluded, it must accept the xml:base attribute </a:documentation>
    <ref name="a-Base"/>
  </define>
  <define name="c-VectorialImages">
    <zeroOrMore>
      <ref name="Group"/>
    </zeroOrMore>
    <zeroOrMore>
      <ref name="Clip"/>
    </zeroOrMore>
  </define>
  <define name="VectorialImages">
    <element name="VECTORIALIMAGES">
      <ref name="a-VectorialImages"/>
      <zeroOrMore>
        <ref name="c-VectorialImages"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="a-Group">
    <a:documentation>Vectorial group type which can contain VectorMoveType and/or VectorLineType and/or VectorCurveType
I had to make it optional in order to validate UNE2.xml</a:documentation>
    <ref name="sid"/>
    <optional>
      <attribute name="style">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="closed">
        <value>true</value>
      </attribute>
    </optional>
    <optional>
      <attribute name="clipZone">
        <data type="string">
          <param name="pattern">p\d+_c\d+</param>
        </data>
      </attribute>
    </optional>
  </define>
  <define name="c-Group">
    <choice>
      <zeroOrMore>
        <ref name="M"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="L"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="C"/>
      </zeroOrMore>
    </choice>
  </define>
  <define name="Group">
    <element name="GROUP">
      <ref name="a-Group"/>
      <zeroOrMore>
        <ref name="c-Group"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="a-Clip">
    <a:documentation>Path clipping area</a:documentation>
    <ref name="a-Basic"/>
    <optional>
      <attribute name="evenodd">
        <choice>
          <value>false</value>
          <value>true</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="idClipZone">
        <data type="string">
          <param name="pattern">p\d+_c\d+</param>
        </data>
      </attribute>
    </optional>
    <ref name="sid"/>
  </define>
  <define name="c-Clip">
    <ref name="Group"/>
  </define>
  <define name="Clip">
    <element name="CLIP">
      <ref name="a-Clip"/>
      <ref name="c-Clip"/>
    </element>
  </define>
  <define name="a-M">
    <ref name="a-Position"/>
  </define>
  <define name="c-M">
    <empty/>
  </define>
  <define name="M">
    <element name="M">
      <ref name="a-M"/>
      <ref name="c-M"/>
    </element>
  </define>
  <define name="a-L">
    <ref name="a-Position"/>
  </define>
  <define name="c-L">
    <empty/>
  </define>
  <define name="L">
    <element name="L">
      <ref name="a-L"/>
      <ref name="c-L"/>
    </element>
  </define>
  <define name="a-C">
    <attribute name="x1">
      <data type="decimal"/>
    </attribute>
    <attribute name="y1">
      <data type="decimal"/>
    </attribute>
    <attribute name="x2">
      <data type="decimal"/>
    </attribute>
    <attribute name="y2">
      <data type="decimal"/>
    </attribute>
    <attribute name="x3">
      <data type="decimal"/>
    </attribute>
    <attribute name="y3">
      <data type="decimal"/>
    </attribute>
  </define>
  <define name="c-C">
    <empty/>
  </define>
  <define name="C">
    <element name="C">
      <ref name="a-C"/>
      <ref name="c-C"/>
    </element>
  </define>
  <define name="a-Block">
    <a:documentation>A block element is a sequence of TEXT elements</a:documentation>
    <optional>
      <attribute name="id">
        <data type="string">
          <param name="pattern">p\d+_b\d+</param>
        </data>
      </attribute>
    </optional>
  </define>
  <define name="c-Block">
    <ref name="Text"/>
  </define>
  <define name="Block">
    <element name="BLOCK">
      <ref name="a-Block"/>
      <oneOrMore>
        <ref name="c-Block"/>
      </oneOrMore>
    </element>
  </define>
  <define name="a-Text">
    <a:documentation>A text element is a sequence of TOKEN elements
ids must follow the page structure</a:documentation>
    <ref name="a-Basic"/>
    <optional>
      <attribute name="id">
        <data type="string">
          <param name="pattern">p\d+_t\d+</param>
        </data>
      </attribute>
    </optional>
  </define>
  <define name="c-Text">
    <ref name="Token"/>
  </define>
  <define name="Text">
    <element name="TEXT">
      <ref name="a-Text"/>
      <oneOrMore>
        <ref name="c-Text"/>
      </oneOrMore>
    </element>
  </define>
  <define name="a-Token">
    <a:documentation>A token element can represent a real token or an image which is inline in the stream
(in this case, the TOKEN tag is empty)</a:documentation>
    <ref name="a-Basic"/>
    <ref name="sid"/>
    <attribute name="id">
      <data type="string">
        <param name="pattern">p\d+_w\d+</param>
      </data>
    </attribute>
    <optional>
      <attribute name="type">
        <data type="integer"/>
      </attribute>
    </optional>
    <choice>
      <optional>
        <ref name="a-tokenImage"/>
      </optional>
      <optional>
        <ref name="a-tokenText"/>
      </optional>
    </choice>
  </define>
  <!-- c-Token= xsd:string text -->
  <define name="Token">
    <element name="TOKEN">
      <ref name="a-Token"/>
      <data type="string">
        <param name="minLength">1</param>
      </data>
    </element>
  </define>
  <define name="a-tokenText">
    <a:documentation>rotation attribute can have four differents values :
 - 0 : left to right direction
 - 1 : bottom up direction
 - 2 : right to left direction
 - 3 : top down direction

angle attribute is a degree value 0 to 360 degrees where :
 - 0 degree is the 0 rotation
 - 90 degrees is the 1 rotation
 - 180 degrees is the 2 rotation
 - 270 degrees is the 3 rotation</a:documentation>
    <ref name="a-Font"/>
    <optional>
      <ref name="a-Detail"/>
    </optional>
    <optional>
      <attribute name="base">
        <data type="decimal"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rotation">
        <choice>
          <value>0</value>
          <value>1</value>
          <value>2</value>
          <value>3</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="angle">
        <data type="decimal"/>
      </attribute>
    </optional>
  </define>
  <define name="a-tokenImage">
    <a:documentation>Theses attributes are added when the token is an image inline
the href attribute get the image path                 </a:documentation>
    <optional>
      <attribute name="href">
        <data type="anyURI"/>
      </attribute>
    </optional>
  </define>
  <define name="a-Detail">
    <a:documentation>Attributes which are added when verbose option is selected
angle-skewing-y attribute is the value of token skewing for the angle value of y token axis
angle-skewing-x attribute is the value of token skewing for the angle value of x token axis</a:documentation>
    <optional>
      <attribute name="angle-skewing-y">
        <data type="decimal"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="angle-skewing-x">
        <data type="decimal"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="word-space">
        <data type="decimal"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="char-space">
        <data type="decimal"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="leading">
        <data type="decimal"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="horiz-scaling">
        <data type="decimal"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="render">
        <data type="decimal"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rise">
        <data type="decimal"/>
      </attribute>
    </optional>
  </define>
  <define name="a-Font">
    <a:documentation>font-name attribute can be normalized or not (default is normalized otherwise not) </a:documentation>
    <attribute name="font-name">
      <data type="string"/>
    </attribute>
    <attribute name="font-size">
      <data type="decimal"/>
    </attribute>
    <attribute name="font-color">
      <data type="string">
        <param name="pattern">#[A-Fa-f0-9]{6}</param>
      </data>
    </attribute>
    <optional>
      <attribute name="bold">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="italic">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="all-cap">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="symbolic">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="serif">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="small-cap">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="fixed-width">
        <data type="string"/>
      </attribute>
    </optional>
  </define>
</grammar>
